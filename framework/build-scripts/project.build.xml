<project name="Bug-DB" >
    <taskdef resource="net/sf/antcontrib/antlib.xml" />

    <!-- Additional properties such as tests to exclude (exclude.list).
         This property file is automatically generated if necessary. -->
    <property file="${basedir}/local.build.properties"/> 

     <!-- Directory of instrumented classes (e.g., for coverage analysis)-->
    <property name="d4j.dir.classes.instrumented" value="${basedir}/.classes_instrumented"/>
    <property name="jcrasher.jar" value="${script.dir}/build-scripts/lib/jcrasher-2.1.3.jar"/>
    <!-- Directory of coverage reports-->
    <property name="d4j.dir.coverage.report" value="${basedir}/coverage" />
    <!-- Data file that holds coverage information-->
    <property name="d4j.file.cobertura.ser" value="cobertura.ser" />
<!--
     Check whether all properties and paths are configured
-->
    <target name="sanity.check" description="Check whether project is correctly set up">
        <fail unless="test.home"/>
        <fail unless="build.home"/>
        <fail unless="ant.refid:test.classpath"/>
        <fail unless="ant.refid:compile.classpath"/>
        <fail unless="ant.refid:major.classpath"/>
    </target>

<!-- 
    Mutate all classes 
--> 
    <target name="mutate">
        <!-- 
        Set compiler property to change default compiler to compiler
        adapter "MajorCompiler". This simple ant compiler adapter will 
        invoke a compiler executable named "major", which has to be on 
        the PATH!
        
        -->
        <property name="build.compiler" value="major.ant.MajorCompiler"/>
        <!-- Call original compile target -->  
        <antcall target="compile"/>
    </target>    

<!-- 
    Properties for mutation kill map export 
--> 
    <target name="major.test">
        <fail message="Property major.exclude not set!" unless="major.exclude" />
        <fail message="Property major.kill.log not set!" unless="major.kill.log" />
        <echo message="Running mutation analysis ..."/>                       
        <junit  
            printsummary="false"                                   
            showoutput="false"
            fork="no"                                                      
            
            mutationAnalysis="true"
            timeoutFactor="16"
            haltonfailure="true"
            killDetailsFile="${major.kill.log}"
            excludeFile="${major.exclude}"
            >

            <!--
            Setting haltonfailure to false leads to the exclusion of
            failing tests -> usually all tests should pass!
            -->
            
            <classpath>
                <pathelement path="${build.home}/gen-tests" />
            </classpath>
            <classpath refid="major.classpath"/>                        
            
            <test name="${test.entry.class}" if="test.entry.class" />
            <batchtest unless="test.entry.class" fork="no">
                <fileset refid="major.tests"/>
            </batchtest>
        </junit>                                                       
    </target> 

<!-- 
    Compile generated unit tests 
--> 

    <target name="compile.gen.tests" depends="compile"> 
        <!-- bug-db.test.dir, build.home, and classes.dir properties have to be provided by caller! -->
        <fail message="Property bug-db.test.dir not set!" unless="bug-db.test.dir" />
        <fail message="Property build.home not set!" unless="build.home" />
        <fail message="Property classes.dir not set!" unless="classes.dir" />
                    
        <echo message="classes.dir: ${classes.dir}" />
        <echo message="build.home: ${build.home}" />

        <mkdir dir="${build.home}/gen-tests" />
       
        <javac srcdir="${bug-db.test.dir}"                               
               destdir="${build.home}/gen-tests"                        
               debug="true"                                            
               deprecation="false"                                     
               optimize="false">
            <compilerarg line="-Xmaxerrs 100000" />
            <classpath>
                <path refid="test.classpath" />
                <pathelement path="${classes.dir}" />
                <!-- Add dependencies to test generation tools -->
                <pathelement path="${jcrasher.jar}" />
                <pathelement path="${script.dir}/build-scripts/lib/evosuite-standalone-runtime-1.0.3.jar" />
                <pathelement path="${script.dir}/build-scripts/lib/evosuite.jar" />
                <pathelement path="${script.dir}/lib/test_generation/generation/randoop-current.jar" />
            </classpath>
        </javac>           
            
    </target> 

<!-- 
    Run generated tests 
-->
     
    <target name="run.gen.tests"  depends="compile.gen.tests" description="Run generated tests">
        <!-- test.dir, test.include, and class.dir properties have to be provided by caller! -->
        <fail message="Property bug-db.test.dir not set!" unless="bug-db.test.dir" />
        <fail message="Property test.include not set!" unless="test.include" />
        <fail message="Property classes.dir not set!" unless="classes.dir" />

        <echo message="classes.dir: ${classes.dir}" />
        <echo message="build.home: ${build.home}" />
        <junit printsummary="no" haltonfailure="no" haltonerror="no" fork="no" showOutput="true">
            <classpath>
                <pathelement location="${d4j.dir.classes.instrumented}" />
                <pathelement path="${classes.dir}" />
                <pathelement path="${build.home}/gen-tests" />
                <pathelement path="${formatter_cp}" />
                <!-- Add dependencies to test generation tools -->
                <pathelement path="${jcrasher.jar}" />
                <path refid="cobertura.classpath" />
                <pathelement path="${script.dir}/build-scripts/lib/evosuite-standalone-runtime-1.0.3.jar" />
                <pathelement path="${script.dir}/build-scripts/lib/evosuite.jar" />
                <pathelement path="${script.dir}/lib/test_generation/generation/randoop-current.jar" />
            </classpath>
            <classpath refid="major.classpath"/>
            
            <sysproperty key="OUTFILE" value="${OUTFILE}"/>
            <formatter classname="edu.washington.cs.mut.testrunner.Formatter" usefile="false" />
            <test name="${test.entry.class}" methods="${test.entry.method}" if="test.entry.class" />
                <batchtest unless="test.entry.class">
                    <fileset dir="${bug-db.test.dir}">
                        <include name="**/${test.include}"/> 
                        <exclude name="**/WashingtonSuite.java"/> 
                    </fileset>
                </batchtest>
        </junit>
    </target>


<!-- 
    Instrument for cobertura
-->
    <property name="cobertura.dir" value="${script.dir}/build-scripts/lib/" />
    <path id="cobertura.classpath">
        <fileset dir="${cobertura.dir}">
            <include name="cobertura-2.0.3.jar" />
            <include name="cobertura-lib/**/*.jar" />
        </fileset>
    </path>
    <taskdef classpathref="cobertura.classpath" resource="tasks.properties" />


    <path id="cobertura.classpath.include" />

    <target name="coverage.instrument" depends="compile">
        <pathconvert refid="cobertura.classpath" property="cobertura.classpath.property" />
        <delete dir="${d4j.dir.classes.instrumented}"/>
        <delete file="${basedir}/${d4j.file.cobertura.ser}"/>
        <cobertura-instrument failOnError="true" toDir="${d4j.dir.classes.instrumented}" datafile="${basedir}/${d4j.file.cobertura.ser}">
            <fileset dir="${classes.dir}" includes="${instrument.list}" />
            <auxClasspath path="${cobertura.aux.classpath}" />
        </cobertura-instrument>
       <!-- <copy file="${d4j.workdir}/${d4j.properties}" todir="${d4j.dir.classes.instrumented}" overwrite="true"/>-->
        <copy file="${basedir}/${d4j.file.cobertura.ser}" todir="${d4j.dir.classes.instrumented}" overwrite="true"/>
    </target>

    <target name="coverage">
        <antcall target="test">
            <reference refid="cobertura.classpath" torefid="cobertura.classpath.include" />
        </antcall>
    </target>


    <target name="coverage.report">
        <mkdir dir="${d4j.dir.coverage.report}" />

        <!-- <cobertura-report format="html" destdir="${coverage.dir}" srcdir="${coverage.src.dir}" /> -->
        <cobertura-report format="xml" destdir="${d4j.dir.coverage.report}" srcdir="${coverage.src.dir}" />
    </target>

<!-- 
    Export classpath for test generation
-->
    <target name="export.classpath" depends="compile">
        <fail message="Property file.export not set!" unless="file.export" />
 
        <path id="project.classpath">
            <pathelement path="${classes.dir}" />
            <path refid="compile.classpath" />
        </path>
    
        <pathconvert targetos="unix" property="project.unix.classpath" refid="project.classpath" />
        <echo message="${project.unix.classpath}" file="${file.export}"/>
    </target>
</project>
