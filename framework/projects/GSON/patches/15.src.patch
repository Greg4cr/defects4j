diff --git a/gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java b/gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java
index 0121231..6a83628 100644
--- a/gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java
+++ b/gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java
@@ -25,7 +25,9 @@ import com.google.gson.stream.JsonReader;
 import com.google.gson.stream.JsonToken;
 import java.io.IOException;
 import java.io.Reader;
+import java.util.ArrayList;
 import java.util.Iterator;
+import java.util.List;
 import java.util.Map;
 
 /**
@@ -45,57 +47,35 @@ public final class JsonTreeReader extends JsonReader {
   };
   private static final Object SENTINEL_CLOSED = new Object();
 
-  /*
-   * The nesting stack. Using a manual array rather than an ArrayList saves 20%.
-   */
-  private Object[] stack = new Object[32];
-  private int stackSize = 0;
-
-  /*
-   * The path members. It corresponds directly to stack: At indices where the
-   * stack contains an object (EMPTY_OBJECT, DANGLING_NAME or NONEMPTY_OBJECT),
-   * pathNames contains the name at this scope. Where it contains an array
-   * (EMPTY_ARRAY, NONEMPTY_ARRAY) pathIndices contains the current index in
-   * that array. Otherwise the value is undefined, and we take advantage of that
-   * by incrementing pathIndices when doing so isn't useful.
-   */
-  private String[] pathNames = new String[32];
-  private int[] pathIndices = new int[32];
+  private final List<Object> stack = new ArrayList<Object>();
 
   public JsonTreeReader(JsonElement element) {
     super(UNREADABLE_READER);
-    push(element);
+    stack.add(element);
   }
 
   @Override public void beginArray() throws IOException {
     expect(JsonToken.BEGIN_ARRAY);
     JsonArray array = (JsonArray) peekStack();
-    push(array.iterator());
-    pathIndices[stackSize - 1] = 0;
+    stack.add(array.iterator());
   }
 
   @Override public void endArray() throws IOException {
     expect(JsonToken.END_ARRAY);
     popStack(); // empty iterator
     popStack(); // array
-    if (stackSize > 0) {
-      pathIndices[stackSize - 1]++;
-    }
   }
 
   @Override public void beginObject() throws IOException {
     expect(JsonToken.BEGIN_OBJECT);
     JsonObject object = (JsonObject) peekStack();
-    push(object.entrySet().iterator());
+    stack.add(object.entrySet().iterator());
   }
 
   @Override public void endObject() throws IOException {
     expect(JsonToken.END_OBJECT);
     popStack(); // empty iterator
     popStack(); // object
-    if (stackSize > 0) {
-      pathIndices[stackSize - 1]++;
-    }
   }
 
   @Override public boolean hasNext() throws IOException {
@@ -104,19 +84,19 @@ public final class JsonTreeReader extends JsonReader {
   }
 
   @Override public JsonToken peek() throws IOException {
-    if (stackSize == 0) {
+    if (stack.isEmpty()) {
       return JsonToken.END_DOCUMENT;
     }
 
     Object o = peekStack();
     if (o instanceof Iterator) {
-      boolean isObject = stack[stackSize - 2] instanceof JsonObject;
+      boolean isObject = stack.get(stack.size() - 2) instanceof JsonObject;
       Iterator<?> iterator = (Iterator<?>) o;
       if (iterator.hasNext()) {
         if (isObject) {
           return JsonToken.NAME;
         } else {
-          push(iterator.next());
+          stack.add(iterator.next());
           return peek();
         }
       } else {
@@ -147,19 +127,16 @@ public final class JsonTreeReader extends JsonReader {
   }
 
   private Object peekStack() {
-    return stack[stackSize - 1];
+    return stack.get(stack.size() - 1);
   }
 
   private Object popStack() {
-    Object result = stack[--stackSize];
-    stack[stackSize] = null;
-    return result;
+    return stack.remove(stack.size() - 1);
   }
 
   private void expect(JsonToken expected) throws IOException {
     if (peek() != expected) {
-      throw new IllegalStateException(
-          "Expected " + expected + " but was " + peek() + locationString());
+      throw new IllegalStateException("Expected " + expected + " but was " + peek());
     }
   }
 
@@ -167,101 +144,72 @@ public final class JsonTreeReader extends JsonReader {
     expect(JsonToken.NAME);
     Iterator<?> i = (Iterator<?>) peekStack();
     Map.Entry<?, ?> entry = (Map.Entry<?, ?>) i.next();
-    String result = (String) entry.getKey();
-    pathNames[stackSize - 1] = result;
-    push(entry.getValue());
-    return result;
+    stack.add(entry.getValue());
+    return (String) entry.getKey();
   }
 
   @Override public String nextString() throws IOException {
     JsonToken token = peek();
     if (token != JsonToken.STRING && token != JsonToken.NUMBER) {
-      throw new IllegalStateException(
-          "Expected " + JsonToken.STRING + " but was " + token + locationString());
-    }
-    String result = ((JsonPrimitive) popStack()).getAsString();
-    if (stackSize > 0) {
-      pathIndices[stackSize - 1]++;
+      throw new IllegalStateException("Expected " + JsonToken.STRING + " but was " + token);
     }
-    return result;
+    return ((JsonPrimitive) popStack()).getAsString();
   }
 
   @Override public boolean nextBoolean() throws IOException {
     expect(JsonToken.BOOLEAN);
-    boolean result = ((JsonPrimitive) popStack()).getAsBoolean();
-    if (stackSize > 0) {
-      pathIndices[stackSize - 1]++;
-    }
-    return result;
+    return ((JsonPrimitive) popStack()).getAsBoolean();
   }
 
   @Override public void nextNull() throws IOException {
     expect(JsonToken.NULL);
     popStack();
-    if (stackSize > 0) {
-      pathIndices[stackSize - 1]++;
-    }
   }
 
   @Override public double nextDouble() throws IOException {
     JsonToken token = peek();
     if (token != JsonToken.NUMBER && token != JsonToken.STRING) {
-      throw new IllegalStateException(
-          "Expected " + JsonToken.NUMBER + " but was " + token + locationString());
+      throw new IllegalStateException("Expected " + JsonToken.NUMBER + " but was " + token);
     }
     double result = ((JsonPrimitive) peekStack()).getAsDouble();
     if (!isLenient() && (Double.isNaN(result) || Double.isInfinite(result))) {
       throw new NumberFormatException("JSON forbids NaN and infinities: " + result);
     }
     popStack();
-    if (stackSize > 0) {
-      pathIndices[stackSize - 1]++;
-    }
     return result;
   }
 
   @Override public long nextLong() throws IOException {
     JsonToken token = peek();
     if (token != JsonToken.NUMBER && token != JsonToken.STRING) {
-      throw new IllegalStateException(
-          "Expected " + JsonToken.NUMBER + " but was " + token + locationString());
+      throw new IllegalStateException("Expected " + JsonToken.NUMBER + " but was " + token);
     }
     long result = ((JsonPrimitive) peekStack()).getAsLong();
     popStack();
-    if (stackSize > 0) {
-      pathIndices[stackSize - 1]++;
-    }
     return result;
   }
 
   @Override public int nextInt() throws IOException {
     JsonToken token = peek();
     if (token != JsonToken.NUMBER && token != JsonToken.STRING) {
-      throw new IllegalStateException(
-          "Expected " + JsonToken.NUMBER + " but was " + token + locationString());
+      throw new IllegalStateException("Expected " + JsonToken.NUMBER + " but was " + token);
     }
     int result = ((JsonPrimitive) peekStack()).getAsInt();
     popStack();
-    if (stackSize > 0) {
-      pathIndices[stackSize - 1]++;
-    }
     return result;
   }
 
   @Override public void close() throws IOException {
-    stack = new Object[] { SENTINEL_CLOSED };
-    stackSize = 1;
+    stack.clear();
+    stack.add(SENTINEL_CLOSED);
   }
 
   @Override public void skipValue() throws IOException {
     if (peek() == JsonToken.NAME) {
       nextName();
-      pathNames[stackSize - 2] = "null";
     } else {
       popStack();
-      pathNames[stackSize - 1] = "null";
     }
-    pathIndices[stackSize - 1]++;
   }
 
   @Override public String toString() {
@@ -272,45 +220,7 @@ public final class JsonTreeReader extends JsonReader {
     expect(JsonToken.NAME);
     Iterator<?> i = (Iterator<?>) peekStack();
     Map.Entry<?, ?> entry = (Map.Entry<?, ?>) i.next();
-    push(entry.getValue());
-    push(new JsonPrimitive((String) entry.getKey()));
-  }
-
-  private void push(Object newTop) {
-    if (stackSize == stack.length) {
-      Object[] newStack = new Object[stackSize * 2];
-      int[] newPathIndices = new int[stackSize * 2];
-      String[] newPathNames = new String[stackSize * 2];
-      System.arraycopy(stack, 0, newStack, 0, stackSize);
-      System.arraycopy(pathIndices, 0, newPathIndices, 0, stackSize);
-      System.arraycopy(pathNames, 0, newPathNames, 0, stackSize);
-      stack = newStack;
-      pathIndices = newPathIndices;
-      pathNames = newPathNames;
-    }
-    stack[stackSize++] = newTop;
-  }
-
-  @Override public String getPath() {
-    StringBuilder result = new StringBuilder().append('$');
-    for (int i = 0; i < stackSize; i++) {
-      if (stack[i] instanceof JsonArray) {
-        if (stack[++i] instanceof Iterator) {
-          result.append('[').append(pathIndices[i]).append(']');
-        }
-      } else if (stack[i] instanceof JsonObject) {
-        if (stack[++i] instanceof Iterator) {
-          result.append('.');
-          if (pathNames[i] != null) {
-            result.append(pathNames[i]);
-          }
-        }
-      }
-    }
-    return result.toString();
-  }
-
-  private String locationString() {
-    return " at path " + getPath();
+    stack.add(entry.getValue());
+    stack.add(new JsonPrimitive((String)entry.getKey()));
   }
 }
