diff --git a/gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java b/gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java
index 706fe60..6f4a0ce 100644
--- a/gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java
+++ b/gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java
@@ -16,10 +16,6 @@
 
 package com.google.gson.functional;
 
-import java.io.IOException;
-import java.util.Arrays;
-import java.util.List;
-
 import com.google.gson.Gson;
 import com.google.gson.GsonBuilder;
 import com.google.gson.TypeAdapter;
@@ -28,7 +24,7 @@ import com.google.gson.annotations.JsonAdapter;
 import com.google.gson.reflect.TypeToken;
 import com.google.gson.stream.JsonReader;
 import com.google.gson.stream.JsonWriter;
-
+import java.io.IOException;
 import junit.framework.TestCase;
 
 /**
@@ -272,35 +268,4 @@ public final class JsonAdapterAnnotationOnFieldsTest extends TestCase {
           + " annotated with @JsonAdapter(LongToStringTypeAdapterFactory.class)");
     }
   }
-
-  public void testFieldAnnotationWorksForParameterizedType() {
-    Gson gson = new Gson();
-    String json = gson.toJson(new Gizmo2(Arrays.asList(new Part("Part"))));
-    assertEquals("{\"part\":\"GizmoPartTypeAdapterFactory\"}", json);
-    Gizmo2 computer = gson.fromJson("{'part':'Part'}", Gizmo2.class);
-    assertEquals("GizmoPartTypeAdapterFactory", computer.part.get(0).name);
-  }
-
-  private static final class Gizmo2 {
-    @JsonAdapter(Gizmo2PartTypeAdapterFactory.class)
-    List<Part> part;
-    Gizmo2(List<Part> part) {
-      this.part = part;
-    }
-  }
-
-  private static class Gizmo2PartTypeAdapterFactory implements TypeAdapterFactory {
-    @Override public <T> TypeAdapter<T> create(Gson gson, final TypeToken<T> type) {
-      return new TypeAdapter<T>() {
-        @Override public void write(JsonWriter out, T value) throws IOException {
-          out.value("GizmoPartTypeAdapterFactory");
-        }
-        @SuppressWarnings("unchecked")
-        @Override public T read(JsonReader in) throws IOException {
-          in.nextString();
-          return (T) Arrays.asList(new Part("GizmoPartTypeAdapterFactory"));
-        }
-      };
-    }
-  }
 }
diff --git a/gson/src/test/java/com/google/gson/functional/JsonAdapterSerializerDeserializerTest.java b/gson/src/test/java/com/google/gson/functional/JsonAdapterSerializerDeserializerTest.java
deleted file mode 100644
index 8ab4e12..0000000
--- a/gson/src/test/java/com/google/gson/functional/JsonAdapterSerializerDeserializerTest.java
+++ /dev/null
@@ -1,164 +0,0 @@
-/*
- * Copyright (C) 2016 Google Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.google.gson.functional;
-
-import java.lang.reflect.Type;
-
-import com.google.gson.Gson;
-import com.google.gson.JsonDeserializationContext;
-import com.google.gson.JsonDeserializer;
-import com.google.gson.JsonElement;
-import com.google.gson.JsonParseException;
-import com.google.gson.JsonPrimitive;
-import com.google.gson.JsonSerializationContext;
-import com.google.gson.JsonSerializer;
-import com.google.gson.annotations.JsonAdapter;
-
-import junit.framework.TestCase;
-
-/**
- * Functional tests for the {@link JsonAdapter} annotation on fields where the value is of
- * type {@link JsonSerializer} or {@link JsonDeserializer}.
- */
-public final class JsonAdapterSerializerDeserializerTest extends TestCase {
-
-  public void testJsonSerializerDeserializerBasedJsonAdapterOnFields() {
-    Gson gson = new Gson();
-    String json = gson.toJson(new Computer(new User("Inderjeet Singh"), null, new User("Jesse Wilson")));
-    assertEquals("{\"user1\":\"UserSerializer\",\"user3\":\"UserSerializerDeserializer\"}", json);
-    Computer computer = gson.fromJson("{'user2':'Jesse Wilson','user3':'Jake Wharton'}", Computer.class);
-    assertEquals("UserSerializer", computer.user2.name);
-    assertEquals("UserSerializerDeserializer", computer.user3.name);
-  }
-
-  private static final class Computer {
-    @JsonAdapter(UserSerializer.class) final User user1;
-    @JsonAdapter(UserDeserializer.class) final User user2;
-    @JsonAdapter(UserSerializerDeserializer.class) final User user3;
-    Computer(User user1, User user2, User user3) {
-      this.user1 = user1;
-      this.user2 = user2;
-      this.user3 = user3;
-    }
-  }
-
-  private static final class User {
-    public final String name;
-    private User(String name) {
-      this.name = name;
-    }
-  }
-
-  private static final class UserSerializer implements JsonSerializer<User> {
-    @Override
-    public JsonElement serialize(User src, Type typeOfSrc, JsonSerializationContext context) {
-      return new JsonPrimitive("UserSerializer");
-    }
-  }
-
-  private static final class UserDeserializer implements JsonDeserializer<User> {
-    @Override
-    public User deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context)
-        throws JsonParseException {
-      return new User("UserSerializer");
-    }
-  }
-
-  private static final class UserSerializerDeserializer implements JsonSerializer<User>, JsonDeserializer<User> {
-    @Override
-    public JsonElement serialize(User src, Type typeOfSrc, JsonSerializationContext context) {
-      return new JsonPrimitive("UserSerializerDeserializer");
-    }
-    @Override
-    public User deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context)
-        throws JsonParseException {
-      return new User("UserSerializerDeserializer");
-    }
-  }
-
-  public void testJsonSerializerDeserializerBasedJsonAdapterOnClass() {
-    Gson gson = new Gson();
-    String json = gson.toJson(new Computer2(new User2("Inderjeet Singh")));
-    assertEquals("{\"user\":\"UserSerializerDeserializer2\"}", json);
-    Computer2 computer = gson.fromJson("{'user':'Inderjeet Singh'}", Computer2.class);
-    assertEquals("UserSerializerDeserializer2", computer.user.name);
-  }
-
-  private static final class Computer2 {
-    final User2 user;
-    Computer2(User2 user) {
-      this.user = user;
-    }
-  }
-
-  @JsonAdapter(UserSerializerDeserializer2.class)
-  private static final class User2 {
-    public final String name;
-    private User2(String name) {
-      this.name = name;
-    }
-  }
-
-  private static final class UserSerializerDeserializer2 implements JsonSerializer<User2>, JsonDeserializer<User2> {
-    @Override
-    public JsonElement serialize(User2 src, Type typeOfSrc, JsonSerializationContext context) {
-      return new JsonPrimitive("UserSerializerDeserializer2");
-    }
-    @Override
-    public User2 deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context)
-        throws JsonParseException {
-      return new User2("UserSerializerDeserializer2");
-    }
-  }
-
-  public void testDifferentJsonAdaptersForGenericFieldsOfSameRawType() {
-    Container c = new Container("Foo", 10);
-    Gson gson = new Gson();
-    String json = gson.toJson(c);
-    assertTrue(json.contains("\"a\":\"BaseStringAdapter\""));
-    assertTrue(json.contains("\"b\":\"BaseIntegerAdapter\""));
-  }
-
-  private static final class Container {
-    @JsonAdapter(BaseStringAdapter.class) Base<String> a;
-    @JsonAdapter(BaseIntegerAdapter.class) Base<Integer> b;
-    Container(String a, int b) {
-      this.a = new Base<String>(a);
-      this.b = new Base<Integer>(b);
-    }
-  }
-
-  private static final class Base<T> {
-    @SuppressWarnings("unused")
-    T value;
-    Base(T value) {
-      this.value = value;
-    }
-  }
-
-  private static final class BaseStringAdapter implements JsonSerializer<Base<String>> {
-    @Override public JsonElement serialize(Base<String> src, Type typeOfSrc, JsonSerializationContext context) {
-      return new JsonPrimitive("BaseStringAdapter");
-    }
-  }
-
-  private static final class BaseIntegerAdapter implements JsonSerializer<Base<Integer>> {
-    @Override public JsonElement serialize(Base<Integer> src, Type typeOfSrc, JsonSerializationContext context) {
-      return new JsonPrimitive("BaseIntegerAdapter");
-    }
-  }
-}
diff --git a/gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java b/gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java
index 1284e2c..7959fc8 100644
--- a/gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java
+++ b/gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java
@@ -45,7 +45,7 @@ public final class RuntimeTypeAdapterFactoryFunctionalTest extends TestCase {
    * This test also ensures that {@link TypeAdapterFactory} registered through {@link JsonAdapter}
    * work correctly for {@link Gson#getDelegateAdapter(TypeAdapterFactory, TypeToken)}.
    */
-  public void testSubclassesAutomaticallySerialized() throws Exception {
+  public void testSubclassesAutomaticallySerialzed() throws Exception {
     Shape shape = new Circle(25);
     String json = gson.toJson(shape);
     shape = gson.fromJson(json, Shape.class);
