diff --git a/gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnClassesTest.java b/gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnClassesTest.java
index b7b29a6..d079841 100644
--- a/gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnClassesTest.java
+++ b/gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnClassesTest.java
@@ -133,12 +133,6 @@ public final class JsonAdapterAnnotationOnClassesTest extends TestCase {
     assertFalse(json.contains("jsonAdapter"));
   }
 
-  public void testNullSafeObjectFromJson() {
-    Gson gson = new Gson();
-    NullableClass fromJson = gson.fromJson("null", NullableClass.class);
-    assertNull(fromJson);
-  }
-
   @JsonAdapter(A.JsonAdapter.class)
   private static class A {
     final String value;
@@ -221,23 +215,6 @@ public final class JsonAdapterAnnotationOnClassesTest extends TestCase {
     }
   }
 
-  @JsonAdapter(value = NullableClassJsonAdapter.class)
-  private static class NullableClass {
-  }
-
-  private static class NullableClassJsonAdapter extends TypeAdapter<NullableClass> {
-    @Override
-    public void write(JsonWriter out, NullableClass value) throws IOException {
-      out.value("nullable");
-    }
-
-    @Override
-    public NullableClass read(JsonReader in) throws IOException {
-      in.nextString();
-      return new NullableClass();
-    }
-  }
-
   @JsonAdapter(FooJsonAdapter.class)
   private static enum Foo { BAR, BAZ }
   private static class FooJsonAdapter extends TypeAdapter<Foo> {
diff --git a/gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java b/gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java
index 4c745ec..fb5121d 100644
--- a/gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java
+++ b/gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java
@@ -200,24 +200,4 @@ public final class JsonAdapterAnnotationOnFieldsTest extends TestCase {
       this.part2 = part2;
     }
   }
-
-  public void testJsonAdapterWrappedInNullSafeAsRequested() {
-    Gson gson = new Gson();
-    String fromJson = "{'part':null}";
-
-    GadgetWithOptionalPart gadget = gson.fromJson(fromJson, GadgetWithOptionalPart.class);
-    assertNull(gadget.part);
-
-    String toJson = gson.toJson(gadget);
-    assertFalse(toJson.contains("PartJsonFieldAnnotationAdapter"));
-  }
-
-  private static final class GadgetWithOptionalPart {
-    @JsonAdapter(value = PartJsonFieldAnnotationAdapter.class)
-    final Part part;
-
-    private GadgetWithOptionalPart(Part part) {
-      this.part = part;
-    }
-  }
 }
