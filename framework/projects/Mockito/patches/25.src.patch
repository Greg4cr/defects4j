diff --git a/org/mockito/exceptions/Reporter.java b/org/mockito/exceptions/Reporter.java
index 4e6045c..63d759e 100644
--- a/org/mockito/exceptions/Reporter.java
+++ b/org/mockito/exceptions/Reporter.java
@@ -748,10 +748,6 @@ public class Reporter {
         ));
     }
 
-    public void defaultAnswerDoesNotAcceptNullParameter() {
-        throw new MockitoException("defaultAnswer() does not accept null parameter");
-    }
-
     public void serializableWontWorkForObjectsThatDontImplementSerializable(Class classToMock) {
         throw new MockitoException(join(
                 "You are using the setting 'withSettings().serializable()' however the type you are trying to mock '" + classToMock.getSimpleName() + "'",
diff --git a/org/mockito/internal/creation/MockSettingsImpl.java b/org/mockito/internal/creation/MockSettingsImpl.java
index a65b265..fa17d28 100644
--- a/org/mockito/internal/creation/MockSettingsImpl.java
+++ b/org/mockito/internal/creation/MockSettingsImpl.java
@@ -73,9 +73,6 @@ public class MockSettingsImpl<T> extends CreationSettings<T> implements MockSett
 
     public MockSettings defaultAnswer(Answer defaultAnswer) {
         this.defaultAnswer = defaultAnswer;
-        if (defaultAnswer == null) {
-            new Reporter().defaultAnswerDoesNotAcceptNullParameter();
-        }
         return this;
     }
 
diff --git a/org/mockito/internal/creation/settings/CreationSettings.java b/org/mockito/internal/creation/settings/CreationSettings.java
index 94d8dc6..a68a594 100644
--- a/org/mockito/internal/creation/settings/CreationSettings.java
+++ b/org/mockito/internal/creation/settings/CreationSettings.java
@@ -19,7 +19,6 @@ import java.util.Set;
  * by Szczepan Faber, created at: 4/9/12
  */
 public class CreationSettings<T> implements MockCreationSettings<T>, Serializable {
-    private static final long serialVersionUID = -6789800638070123629L;
 
     protected Class<T> typeToMock;
     protected Set<Class> extraInterfaces = new LinkedHashSet<Class>();
@@ -33,7 +32,6 @@ public class CreationSettings<T> implements MockCreationSettings<T>, Serializabl
 
     public CreationSettings() {}
 
-    @SuppressWarnings("unchecked")
     public CreationSettings(CreationSettings copy) {
         this.typeToMock = copy.typeToMock;
         this.extraInterfaces = copy.extraInterfaces;
diff --git a/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java b/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java
index 918c42a..aa613b0 100644
--- a/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java
+++ b/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java
@@ -1,62 +1,45 @@
-/*
- * Copyright (c) 2007 Mockito contributors
- * This program is made available under the terms of the MIT License.
- */
+/*
+ * Copyright (c) 2007 Mockito contributors
+ * This program is made available under the terms of the MIT License.
+ */
 package org.mockito.internal.stubbing.defaultanswers;
 
-import org.mockito.MockSettings;
+import org.mockito.Mockito;
 import org.mockito.internal.InternalMockHandler;
-import org.mockito.internal.creation.settings.CreationSettings;
 import org.mockito.internal.stubbing.InvocationContainerImpl;
 import org.mockito.internal.stubbing.StubbedInvocationMatcher;
 import org.mockito.internal.util.MockCreationValidator;
 import org.mockito.internal.util.MockUtil;
-import org.mockito.internal.util.reflection.GenericMetadataSupport;
 import org.mockito.invocation.InvocationOnMock;
 import org.mockito.stubbing.Answer;
 
 import java.io.Serializable;
 
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.withSettings;
-
 /**
  * Returning deep stub implementation.
  *
  * Will return previously created mock if the invocation matches.
  *
- * <p>Supports nested generic information, with this answer you can write code like this :
- *
- * <pre class="code"><code class="java">
- *     interface GenericsNest&lt;K extends Comparable&lt;K&gt; & Cloneable&gt; extends Map&lt;K, Set&lt;Number&gt;&gt; {}
- *
- *     GenericsNest&lt;?&gt; mock = mock(GenericsNest.class, new ReturnsGenericDeepStubs());
- *     Number number = mock.entrySet().iterator().next().getValue().iterator().next();
- * </code></pre>
- * </p>
- *
- * @see org.mockito.Mockito#RETURNS_DEEP_STUBS
+ * @see Mockito#RETURNS_DEEP_STUBS
  * @see org.mockito.Answers#RETURNS_DEEP_STUBS
  */
 public class ReturnsDeepStubs implements Answer<Object>, Serializable {
     
-    private static final long serialVersionUID = -7105341425736035847L;
-
-    private ReturnsEmptyValues delegate = new ReturnsEmptyValues();
+    private static final long serialVersionUID = -6926328908792880098L;
+    
+    private Answer<Object> delegate = new ReturnsEmptyValues();
 
     public Object answer(InvocationOnMock invocation) throws Throwable {
-        GenericMetadataSupport returnTypeGenericMetadata =
-                actualParameterizedType(invocation.getMock()).resolveGenericReturnType(invocation.getMethod());
+        Class<?> clz = invocation.getMethod().getReturnType();
 
-        Class<?> rawType = returnTypeGenericMetadata.rawType();
-        if (!new MockCreationValidator().isTypeMockable(rawType)) {
-            return delegate.returnValueFor(rawType);
+        if (!new MockCreationValidator().isTypeMockable(clz)) {
+            return delegate.answer(invocation);
         }
 
-        return getMock(invocation, returnTypeGenericMetadata);
+        return getMock(invocation);
     }
 
-    private Object getMock(InvocationOnMock invocation, GenericMetadataSupport returnTypeGenericMetadata) throws Throwable {
+    private Object getMock(InvocationOnMock invocation) throws Throwable {
     	InternalMockHandler<Object> handler = new MockUtil().getMockHandler(invocation.getMock());
     	InvocationContainerImpl container = (InvocationContainerImpl) handler.getInvocationContainer();
 
@@ -68,42 +51,12 @@ public class ReturnsDeepStubs implements Answer<Object>, Serializable {
 		}
 
         // deep stub
-        return recordDeepStubMock(createNewDeepStubMock(returnTypeGenericMetadata), container);
-    }
-
-    /**
-     * Creates a mock using the Generics Metadata.
-     *
-     * @param returnTypeGenericMetadata The metadata to use to create the new mock.
-     * @return The mock
-     */
-    private Object createNewDeepStubMock(GenericMetadataSupport returnTypeGenericMetadata) {
-        return mock(
-                returnTypeGenericMetadata.rawType(),
-                withSettingsUsing(returnTypeGenericMetadata)
-        );
+        return recordDeepStubMock(invocation, container);
     }
 
-    private MockSettings withSettingsUsing(GenericMetadataSupport returnTypeGenericMetadata) {
-        MockSettings mockSettings =
-                returnTypeGenericMetadata.rawExtraInterfaces().length > 0 ?
-                withSettings().extraInterfaces(returnTypeGenericMetadata.rawExtraInterfaces())
-                : withSettings();
-
-        return mockSettings
-                .defaultAnswer(returnsDeepStubsAnswerUsing(returnTypeGenericMetadata));
-    }
-
-    private ReturnsDeepStubs returnsDeepStubsAnswerUsing(final GenericMetadataSupport returnTypeGenericMetadata) {
-        return new ReturnsDeepStubs() {
-            @Override
-            protected GenericMetadataSupport actualParameterizedType(Object mock) {
-                return returnTypeGenericMetadata;
-            }
-        };
-    }
-
-    private Object recordDeepStubMock(final Object mock, InvocationContainerImpl container) throws Throwable {
+    private Object recordDeepStubMock(InvocationOnMock invocation, InvocationContainerImpl container) {
+        Class<?> clz = invocation.getMethod().getReturnType();
+        final Object mock = Mockito.mock(clz, this);
 
         container.addAnswer(new Answer<Object>() {
             public Object answer(InvocationOnMock invocation) throws Throwable {
@@ -113,9 +66,4 @@ public class ReturnsDeepStubs implements Answer<Object>, Serializable {
 
         return mock;
     }
-
-    protected GenericMetadataSupport actualParameterizedType(Object mock) {
-        CreationSettings mockSettings = (CreationSettings) new MockUtil().getMockHandler(mock).getMockSettings();
-        return GenericMetadataSupport.inferFrom(mockSettings.getTypeToMock());
-    }
 }
diff --git a/org/mockito/internal/util/ConsoleMockitoLogger.java b/org/mockito/internal/util/ConsoleMockitoLogger.java
index 80cac5c..5ca5da4 100644
--- a/org/mockito/internal/util/ConsoleMockitoLogger.java
+++ b/org/mockito/internal/util/ConsoleMockitoLogger.java
@@ -1,7 +1,7 @@
-/*
- * Copyright (c) 2007 Mockito contributors
- * This program is made available under the terms of the MIT License.
- */
+/*
+ * Copyright (c) 2007 Mockito contributors
+ * This program is made available under the terms of the MIT License.
+ */
 package org.mockito.internal.util;
 
 public class ConsoleMockitoLogger implements MockitoLogger {
@@ -10,6 +10,6 @@ public class ConsoleMockitoLogger implements MockitoLogger {
      * @see org.mockito.internal.util.Logger#print(java.lang.Object)
      */
     public void log(Object what) {
-        System.out.println(what);
+        System.out.print(what);
     }
 }
diff --git a/org/mockito/internal/util/reflection/GenericMaster.java b/org/mockito/internal/util/reflection/GenericMaster.java
index 29e384a..e463e59 100644
--- a/org/mockito/internal/util/reflection/GenericMaster.java
+++ b/org/mockito/internal/util/reflection/GenericMaster.java
@@ -1,34 +1,34 @@
-/*
- * Copyright (c) 2007 Mockito contributors
- * This program is made available under the terms of the MIT License.
- */
-package org.mockito.internal.util.reflection;
-
-import java.lang.reflect.Field;
-import java.lang.reflect.ParameterizedType;
-import java.lang.reflect.Type;
-
-@SuppressWarnings("unchecked")
-public class GenericMaster {
-
-    /**
-     * Finds the generic type (parametrized type) of the field. If the field is not generic it returns Object.class. 
-     * 
-     * @param field
-     */
-    public Class getGenericType(Field field) {        
-        Type generic = field.getGenericType();
-        if (generic != null && generic instanceof ParameterizedType) {
-            Type actual = ((ParameterizedType) generic).getActualTypeArguments()[0];
-            if (actual instanceof Class) {
-                return (Class) actual;
-            } else if (actual instanceof ParameterizedType) {
-                //in case of nested generics we don't go deep
-                return (Class) ((ParameterizedType) actual).getRawType();
-            }
-        }
-        
-        return Object.class;
-    }
-
-}
+/*
+ * Copyright (c) 2007 Mockito contributors
+ * This program is made available under the terms of the MIT License.
+ */
+package org.mockito.internal.util.reflection;
+
+import java.lang.reflect.Field;
+import java.lang.reflect.ParameterizedType;
+import java.lang.reflect.Type;
+
+@SuppressWarnings("unchecked")
+public class GenericMaster {
+
+    /**
+     * Finds the generic type (parametrized type) of the field. If the field is not generic it returns Object.class. 
+     * 
+     * @param field
+     */
+    public Class getGenericType(Field field) {        
+        Type generic = field.getGenericType();
+        if (generic != null && generic instanceof ParameterizedType) {
+            Type actual = ((ParameterizedType) generic).getActualTypeArguments()[0];
+            if (actual instanceof Class) {
+                return (Class) actual;
+            } else if (actual instanceof ParameterizedType) {
+                //in case of nested generics we don't go deep
+                return (Class) ((ParameterizedType) actual).getRawType();
+            }
+        }
+        
+        return Object.class;
+    }
+
+}
diff --git a/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/org/mockito/internal/util/reflection/GenericMetadataSupport.java
deleted file mode 100644
index 418fbe4..0000000
--- a/org/mockito/internal/util/reflection/GenericMetadataSupport.java
+++ /dev/null
@@ -1,613 +0,0 @@
-/*
- * Copyright (c) 2007 Mockito contributors
- * This program is made available under the terms of the MIT License.
- */
-package org.mockito.internal.util.reflection;
-
-
-import org.mockito.Incubating;
-import org.mockito.exceptions.base.MockitoException;
-import org.mockito.internal.util.Checks;
-import org.mockito.stubbing.Answer;
-
-import java.lang.reflect.*;
-import java.util.*;
-
-
-/**
- * This class can retrieve generic meta-data that the compiler stores on classes
- * and accessible members.
- *
- * <p>
- *     The main idea of this code is to create a Map that will help to resolve return types.
- *     In order to actually work with nested generics, this map will have to be passed along new instances
- *     as a type context.
- * </p>
- *
- * <p>
- *     Hence :
- *     <ul>
- *         <li>the metadata is created using the {@link #inferFrom(Type)} method from a real
- *         Class or from a ParameterizedType, other types are not yet supported.</li>
- *
- *         <li>Then from this metadata, we can extract meta-data for a generic return type of a method, using
- *         {@link #resolveGenericReturnType(Method)}.</li>
- *
- *         <li>Finally as we want to mock the actual type, but we want to pass along the contextual generics meta-data
- *         we need to create the mock ourselves as we know how to create it, depending on the kind of Type (Class,
- *         ParameterizedType, TypeVariable), the method {@link #toMock(Answer)} assumes this responsibility.</li>
- *     </ul>
- * </p>
- *
- * <p>
- * For now this code support the following kind of generic declarations :
- * <pre class="code"><code class="java">
- * interface GenericsNest&lt;K extends Comparable&lt;K&gt; & Cloneable&gt; extends Map&lt;K, Set&lt;Number&gt;&gt; {
- *     Set&lt;Number&gt; remove(Object key); // override with fixed ParameterizedType
- *     List&lt;? super Integer&gt; returning_wildcard_with_class_lower_bound();
- *     List&lt;? super K&gt; returning_wildcard_with_typeVar_lower_bound();
- *     List&lt;? extends K&gt; returning_wildcard_with_typeVar_upper_bound();
- *     K returningK();
- *     &lt;O extends K&gt; List&lt;O&gt; paramType_with_type_params();
- *     &lt;S, T extends S&gt; T two_type_params();
- *     &lt;O extends K&gt; O typeVar_with_type_params();
- *     Number returningNonGeneric();
- * }
- * </code></pre>
- *
- * @see #inferFrom(Type)
- * @see #resolveGenericReturnType(Method)
- * @see #toMock(Answer)
- * @see org.mockito.internal.stubbing.defaultanswers.ReturnsGenericDeepStubs
- */
-@Incubating
-public abstract class GenericMetadataSupport {
-
-    // public static MockitoLogger logger = new ConsoleMockitoLogger();
-
-    /**
-     * Represents actual type variables resolved for current class.
-     */
-    protected Map<TypeVariable, Type> contextualActualTypeParameters = new HashMap<TypeVariable, Type>();
-
-
-    protected void registerTypeVariablesOn(Type classType) {
-        if (!(classType instanceof ParameterizedType)) {
-            return;
-        }
-        ParameterizedType parameterizedType = (ParameterizedType) classType;
-        TypeVariable[] typeParameters = ((Class<?>) parameterizedType.getRawType()).getTypeParameters();
-        Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();
-        for (int i = 0; i < actualTypeArguments.length; i++) {
-            TypeVariable typeParameter = typeParameters[i];
-            Type actualTypeArgument = actualTypeArguments[i];
-
-            if (actualTypeArgument instanceof WildcardType) {
-                contextualActualTypeParameters.put(typeParameter, boundsOf((WildcardType) actualTypeArgument));
-            } else {
-                contextualActualTypeParameters.put(typeParameter, actualTypeArgument);
-            }
-            // logger.log("For '" + parameterizedType + "' found type variable : { '" + typeParameter + "(" + System.identityHashCode(typeParameter) + ")" + "' : '" + actualTypeArgument + "(" + System.identityHashCode(typeParameter) + ")" + "' }");
-        }
-    }
-
-    protected void registerTypeParametersOn(TypeVariable[] typeParameters) {
-        for (TypeVariable typeParameter : typeParameters) {
-            contextualActualTypeParameters.put(typeParameter, boundsOf(typeParameter));
-            // logger.log("For '" + typeParameter.getGenericDeclaration() + "' found type variable : { '" + typeParameter + "(" + System.identityHashCode(typeParameter) + ")" + "' : '" + boundsOf(typeParameter) + "' }");
-        }
-    }
-
-    /**
-     * @param typeParameter The TypeVariable parameter
-     * @return A {@link BoundedType} for easy bound information, if first bound is a TypeVariable
-     *         then retrieve BoundedType of this TypeVariable
-     */
-    private BoundedType boundsOf(TypeVariable typeParameter) {
-        if (typeParameter.getBounds()[0] instanceof TypeVariable) {
-            return boundsOf((TypeVariable) typeParameter.getBounds()[0]);
-        }
-        return new TypeVarBoundedType(typeParameter);
-    }
-
-    /**
-     * @param wildCard The WildCard type
-     * @return A {@link BoundedType} for easy bound information, if first bound is a TypeVariable
-     *         then retrieve BoundedType of this TypeVariable
-     */
-    private BoundedType boundsOf(WildcardType wildCard) {
-        /*
-         *  According to JLS(http://docs.oracle.com/javase/specs/jls/se5.0/html/typesValues.html#4.5.1):
-         *  - Lower and upper can't coexist: (for instance, this is not allowed: <? extends List<String> & super MyInterface>)
-         *  - Multiple bounds are not supported (for instance, this is not allowed: <? extends List<String> & MyInterface>)
-         */
-
-        WildCardBoundedType wildCardBoundedType = new WildCardBoundedType(wildCard);
-        if (wildCardBoundedType.firstBound() instanceof TypeVariable) {
-            return boundsOf((TypeVariable) wildCardBoundedType.firstBound());
-        }
-
-        return wildCardBoundedType;
-    }
-
-
-
-    /**
-     * @return Raw type of the current instance.
-     */
-    public abstract Class<?> rawType();
-
-
-
-    /**
-     * @return Returns extra interfaces <strong>if relevant</strong>, otherwise empty List.
-     */
-    public List<Type> extraInterfaces() {
-        return Collections.emptyList();
-    }
-
-    /**
-     * @return Returns an array with the raw types of {@link #extraInterfaces()} <strong>if relevant</strong>.
-     */
-    public Class<?>[] rawExtraInterfaces() {
-        return new Class[0];
-    }
-
-
-
-    /**
-     * @return Actual type arguments matching the type variables of the raw type represented by this {@link GenericMetadataSupport} instance.
-     */
-    public Map<TypeVariable, Type> actualTypeArguments() {
-        TypeVariable[] typeParameters = rawType().getTypeParameters();
-        LinkedHashMap<TypeVariable, Type> actualTypeArguments = new LinkedHashMap<TypeVariable, Type>();
-
-        for (TypeVariable typeParameter : typeParameters) {
-
-            Type actualType = getActualTypeArgumentFor(typeParameter);
-
-            actualTypeArguments.put(typeParameter, actualType);
-            // logger.log("For '" + rawType().getCanonicalName() + "' returning explicit TypeVariable : { '" + typeParameter + "(" + System.identityHashCode(typeParameter) + ")" + "' : '" + actualType +"' }");
-        }
-
-        return actualTypeArguments;
-    }
-
-    protected Type getActualTypeArgumentFor(TypeVariable typeParameter) {
-        Type type = this.contextualActualTypeParameters.get(typeParameter);
-        if (type instanceof TypeVariable) {
-            TypeVariable typeVariable = (TypeVariable) type;
-            return getActualTypeArgumentFor(typeVariable);
-        }
-
-        return type;
-    }
-
-
-
-    /**
-     * Resolve current method generic return type to a {@link GenericMetadataSupport}.
-     *
-     * @param method Method to resolve the return type.
-     * @return {@link GenericMetadataSupport} representing this generic return type.
-     */
-    public GenericMetadataSupport resolveGenericReturnType(Method method) {
-        Type genericReturnType = method.getGenericReturnType();
-        // logger.log("Method '" + method.toGenericString() + "' has return type : " + genericReturnType.getClass().getInterfaces()[0].getSimpleName() + " : " + genericReturnType);
-
-        if (genericReturnType instanceof Class) {
-            return new NotGenericReturnTypeSupport(genericReturnType);
-        }
-        if (genericReturnType instanceof ParameterizedType) {
-            return new ParameterizedReturnType(this, method.getTypeParameters(), (ParameterizedType) method.getGenericReturnType());
-        }
-        if (genericReturnType instanceof TypeVariable) {
-            return new TypeVariableReturnType(this, method.getTypeParameters(), (TypeVariable) genericReturnType);
-        }
-
-        throw new MockitoException("Ouch, it shouldn't happen, type '" + genericReturnType.getClass().getCanonicalName() + "' on method : '" + method.toGenericString() + "' is not supported : " + genericReturnType);
-    }
-
-    /**
-     * Create an new instance of {@link GenericMetadataSupport} inferred from a {@link Type}.
-     *
-     * <p>
-     *     At the moment <code>type</code> can only be a {@link Class} or a {@link ParameterizedType}, otherwise
-     *     it'll throw a {@link MockitoException}.
-     * </p>
-     *
-     * @param type The class from which the {@link GenericMetadataSupport} should be built.
-     * @return The new {@link GenericMetadataSupport}.
-     * @throws MockitoException Raised if type is not a {@link Class} or a {@link ParameterizedType}.
-     */
-    public static GenericMetadataSupport inferFrom(Type type) {
-        Checks.checkNotNull(type, "type");
-        if (type instanceof Class) {
-            return new FromClassGenericMetadataSupport((Class<?>) type);
-        }
-        if (type instanceof ParameterizedType) {
-            return new FromParameterizedTypeGenericMetadataSupport((ParameterizedType) type);
-        }
-
-        throw new MockitoException("Type meta-data for this Type (" + type.getClass().getCanonicalName() + ") is not supported : " + type);
-    }
-
-
-    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
-    //// Below are specializations of GenericMetadataSupport that could handle retrieval of possible Types
-    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
-
-    /**
-     * Generic metadata implementation for {@link Class}.
-     *
-     * Offer support to retrieve generic metadata on a {@link Class} by reading type parameters and type variables on
-     * the class and its ancestors and interfaces.
-     */
-    private static class FromClassGenericMetadataSupport extends GenericMetadataSupport {
-        private Class<?> clazz;
-
-        public FromClassGenericMetadataSupport(Class<?> clazz) {
-            this.clazz = clazz;
-            readActualTypeParametersOnDeclaringClass();
-        }
-
-        private void readActualTypeParametersOnDeclaringClass() {
-            registerTypeParametersOn(clazz.getTypeParameters());
-            registerTypeVariablesOn(clazz.getGenericSuperclass());
-            for (Type genericInterface : clazz.getGenericInterfaces()) {
-                registerTypeVariablesOn(genericInterface);
-            }
-        }
-
-        @Override
-        public Class<?> rawType() {
-            return clazz;
-        }
-    }
-
-
-    /**
-     * Generic metadata implementation for "standalone" {@link ParameterizedType}.
-     *
-     * Offer support to retrieve generic metadata on a {@link ParameterizedType} by reading type variables of
-     * the related raw type and declared type variable of this parameterized type.
-     *
-     * This class is not designed to work on ParameterizedType returned by {@link Method#getGenericReturnType()}, as
-     * the ParameterizedType instance return in these cases could have Type Variables that refer to type declaration(s).
-     * That's what meant the "standalone" word at the beginning of the Javadoc.
-     * Instead use {@link ParameterizedReturnType}.
-     */
-    private static class FromParameterizedTypeGenericMetadataSupport extends GenericMetadataSupport {
-        private ParameterizedType parameterizedType;
-
-        public FromParameterizedTypeGenericMetadataSupport(ParameterizedType parameterizedType) {
-            this.parameterizedType = parameterizedType;
-            readActualTypeParameters();
-        }
-
-        private void readActualTypeParameters() {
-            registerTypeVariablesOn(parameterizedType.getRawType());
-            registerTypeVariablesOn(parameterizedType);
-        }
-
-        @Override
-        public Class<?> rawType() {
-            return (Class<?>) parameterizedType.getRawType();
-        }
-    }
-
-
-    /**
-     * Generic metadata specific to {@link ParameterizedType} returned via {@link Method#getGenericReturnType()}.
-     */
-    private static class ParameterizedReturnType extends GenericMetadataSupport {
-        private final ParameterizedType parameterizedType;
-        private final TypeVariable[] typeParameters;
-
-        public ParameterizedReturnType(GenericMetadataSupport source, TypeVariable[] typeParameters, ParameterizedType parameterizedType) {
-            this.parameterizedType = parameterizedType;
-            this.typeParameters = typeParameters;
-            this.contextualActualTypeParameters = source.contextualActualTypeParameters;
-
-            readTypeParameters();
-            readTypeVariables();
-        }
-
-        private void readTypeParameters() {
-            registerTypeParametersOn(typeParameters);
-        }
-
-        private void readTypeVariables() {
-            registerTypeVariablesOn(parameterizedType);
-        }
-
-        @Override
-        public Class<?> rawType() {
-            return (Class<?>) parameterizedType.getRawType();
-        }
-
-    }
-
-
-    /**
-     * Generic metadata for {@link TypeVariable} returned via {@link Method#getGenericReturnType()}.
-     */
-    private static class TypeVariableReturnType extends GenericMetadataSupport {
-        private final TypeVariable typeVariable;
-        private final TypeVariable[] typeParameters;
-        private Class<?> rawType;
-
-
-
-        public TypeVariableReturnType(GenericMetadataSupport source, TypeVariable[] typeParameters, TypeVariable typeVariable) {
-            this.typeParameters = typeParameters;
-            this.typeVariable = typeVariable;
-            this.contextualActualTypeParameters = source.contextualActualTypeParameters;
-
-            readTypeParameters();
-            readTypeVariables();
-        }
-
-        private void readTypeParameters() {
-            registerTypeParametersOn(typeParameters);
-        }
-
-        private void readTypeVariables() {
-            for (Type type : typeVariable.getBounds()) {
-                registerTypeVariablesOn(type);
-            }
-            registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));
-        }
-
-        @Override
-        public Class<?> rawType() {
-            if (rawType == null) {
-                rawType = extractRawTypeOf(typeVariable);
-            }
-            return rawType;
-        }
-
-        private Class<?> extractRawTypeOf(Type type) {
-            if (type instanceof Class) {
-                return (Class<?>) type;
-            }
-            if (type instanceof ParameterizedType) {
-                return (Class<?>) ((ParameterizedType) type).getRawType();
-            }
-            if (type instanceof BoundedType) {
-                return extractRawTypeOf(((BoundedType) type).firstBound());
-            }
-            if (type instanceof TypeVariable) {
-                /*
-                 * If type is a TypeVariable, then it is needed to gather data elsewhere. Usually TypeVariables are declared
-                 * on the class definition, such as such as List<E>.
-                 */
-                return extractRawTypeOf(contextualActualTypeParameters.get(type));
-            }
-            throw new MockitoException("Raw extraction not supported for : '" + type + "'");
-        }
-
-        @Override
-        public List<Type> extraInterfaces() {
-            Type type = extractActualBoundedTypeOf(typeVariable);
-            if (type instanceof BoundedType) {
-                return Arrays.asList(((BoundedType) type).interfaceBounds());
-            }
-            if (type instanceof ParameterizedType) {
-                return Collections.singletonList(type);
-            }
-            if (type instanceof Class) {
-                return Collections.emptyList();
-            }
-            throw new MockitoException("Cannot extract extra-interfaces from '" + typeVariable + "' : '" + type + "'");
-        }
-
-        /**
-         * @return Returns an array with the extracted raw types of {@link #extraInterfaces()}.
-         * @see #extractRawTypeOf(java.lang.reflect.Type)
-         */
-        public Class<?>[] rawExtraInterfaces() {
-            List<Type> extraInterfaces = extraInterfaces();
-            List<Class<?>> rawExtraInterfaces = new ArrayList<Class<?>>();
-            for (Type extraInterface : extraInterfaces) {
-                Class<?> rawInterface = extractRawTypeOf(extraInterface);
-                // avoid interface collision with actual raw type (with typevariables, resolution ca be quite aggressive)
-                if(!rawType().equals(rawInterface)) {
-                    rawExtraInterfaces.add(rawInterface);
-                }
-            }
-            return rawExtraInterfaces.toArray(new Class[rawExtraInterfaces.size()]);
-        }
-
-        private Type extractActualBoundedTypeOf(Type type) {
-            if (type instanceof TypeVariable) {
-                /*
-                If type is a TypeVariable, then it is needed to gather data elsewhere. Usually TypeVariables are declared
-                on the class definition, such as such as List<E>.
-                */
-                return extractActualBoundedTypeOf(contextualActualTypeParameters.get(type));
-            }
-            if (type instanceof BoundedType) {
-                Type actualFirstBound = extractActualBoundedTypeOf(((BoundedType) type).firstBound());
-                if (!(actualFirstBound instanceof BoundedType)) {
-                    return type; // avoid going one step further, ie avoid : O(TypeVar) -> K(TypeVar) -> Some ParamType
-                }
-                return actualFirstBound;
-            }
-            return type; // irrelevant, we don't manage other types as they are not bounded.
-        }
-    }
-
-
-
-    /**
-     * Non-Generic metadata for {@link Class} returned via {@link Method#getGenericReturnType()}.
-     */
-    private static class NotGenericReturnTypeSupport extends GenericMetadataSupport {
-        private final Class<?> returnType;
-
-        public NotGenericReturnTypeSupport(Type genericReturnType) {
-            returnType = (Class<?>) genericReturnType;
-        }
-
-        @Override
-        public Class<?> rawType() {
-            return returnType;
-        }
-    }
-
-
-
-    /**
-     * Type representing bounds of a type
-     *
-     * @see TypeVarBoundedType
-     * @see <a href="http://docs.oracle.com/javase/specs/jls/se5.0/html/typesValues.html#4.4">http://docs.oracle.com/javase/specs/jls/se5.0/html/typesValues.html#4.4</a>
-     * @see WildCardBoundedType
-     * @see <a href="http://docs.oracle.com/javase/specs/jls/se5.0/html/typesValues.html#4.5.1">http://docs.oracle.com/javase/specs/jls/se5.0/html/typesValues.html#4.5.1</a>
-     */
-    public static interface BoundedType extends Type {
-        Type firstBound();
-
-        Type[] interfaceBounds();
-    }
-
-    /**
-     * Type representing bounds of a type variable, allows to keep all bounds information.
-     *
-     * <p>It uses the first bound in the array, as this array is never null and always contains at least
-     * one element (Object is always here if no bounds are declared).</p>
-     *
-     * <p>If upper bounds are declared with SomeClass and additional interfaces, then firstBound will be SomeClass and
-     * interfacesBound will be an array of the additional interfaces.
-     *
-     * i.e. <code>SomeClass</code>.
-     * <pre class="code"><code class="java">
-     *     interface UpperBoundedTypeWithClass<E extends Comparable<E> & Cloneable> {
-     *         E get();
-     *     }
-     *     // will return Comparable type
-     * </code></pre>
-     * </p>
-     *
-     * @see <a href="http://docs.oracle.com/javase/specs/jls/se5.0/html/typesValues.html#4.4">http://docs.oracle.com/javase/specs/jls/se5.0/html/typesValues.html#4.4</a>
-     */
-    public static class TypeVarBoundedType implements BoundedType {
-        private TypeVariable typeVariable;
-
-
-        public TypeVarBoundedType(TypeVariable typeVariable) {
-            this.typeVariable = typeVariable;
-        }
-
-        /**
-         * @return either a class or an interface (parameterized or not), if no bounds declared Object is returned.
-         */
-        public Type firstBound() {
-            return typeVariable.getBounds()[0]; //
-        }
-
-        /**
-         * On a Type Variable (typeVar extends C_0 & I_1 & I_2 & etc), will return an array
-         * containing I_1 and I_2.
-         *
-         * @return other bounds for this type, these bounds can only be only interfaces as the JLS says,
-         * empty array if no other bound declared.
-         */
-        public Type[] interfaceBounds() {
-            Type[] interfaceBounds = new Type[typeVariable.getBounds().length - 1];
-            System.arraycopy(typeVariable.getBounds(), 1, interfaceBounds, 0, typeVariable.getBounds().length - 1);
-            return interfaceBounds;
-        }
-
-        @Override
-        public boolean equals(Object o) {
-            if (this == o) return true;
-            if (o == null || getClass() != o.getClass()) return false;
-
-            return typeVariable.equals(((TypeVarBoundedType) o).typeVariable);
-
-        }
-
-        @Override
-        public int hashCode() {
-            return typeVariable.hashCode();
-        }
-
-        @Override
-        public String toString() {
-            final StringBuilder sb = new StringBuilder();
-            sb.append("{firstBound=").append(firstBound());
-            sb.append(", interfaceBounds=").append(Arrays.deepToString(interfaceBounds()));
-            sb.append('}');
-            return sb.toString();
-        }
-
-        public TypeVariable typeVariable() {
-            return typeVariable;
-        }
-    }
-
-    /**
-     * Type representing bounds of a wildcard, allows to keep all bounds information.
-     *
-     * <p>The JLS says that lower bound and upper bound are mutually exclusive, and that multiple bounds
-     * are not allowed.
-     *
-     * @see <a href="http://docs.oracle.com/javase/specs/jls/se5.0/html/typesValues.html#4.4">http://docs.oracle.com/javase/specs/jls/se5.0/html/typesValues.html#4.4</a>
-     */
-    public static class WildCardBoundedType implements BoundedType {
-        private WildcardType wildcard;
-
-
-        public WildCardBoundedType(WildcardType wildcard) {
-            this.wildcard = wildcard;
-        }
-
-        /**
-         * @return The first bound, either a type or a reference to a TypeVariable
-         */
-        public Type firstBound() {
-            Type[] lowerBounds = wildcard.getLowerBounds();
-            Type[] upperBounds = wildcard.getUpperBounds();
-
-            return lowerBounds.length != 0 ? lowerBounds[0] : upperBounds[0];
-        }
-
-        /**
-         * @return An empty array as, wildcard don't support multiple bounds.
-         */
-        public Type[] interfaceBounds() {
-            return new Type[0];
-        }
-
-        @Override
-        public boolean equals(Object o) {
-            if (this == o) return true;
-            if (o == null || getClass() != o.getClass()) return false;
-
-            return wildcard.equals(((TypeVarBoundedType) o).typeVariable);
-
-        }
-
-        @Override
-        public int hashCode() {
-            return wildcard.hashCode();
-        }
-
-        @Override
-        public String toString() {
-            final StringBuilder sb = new StringBuilder();
-            sb.append("{firstBound=").append(firstBound());
-            sb.append(", interfaceBounds=[]}");
-            return sb.toString();
-        }
-
-        public WildcardType wildCard() {
-            return wildcard;
-        }
-    }
-
-}
-
-
