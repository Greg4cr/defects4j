diff --git a/org/mockito/internal/util/MockUtil.java b/org/mockito/internal/util/MockUtil.java
index d7c530c..0a097a8 100644
--- a/org/mockito/internal/util/MockUtil.java
+++ b/org/mockito/internal/util/MockUtil.java
@@ -18,6 +18,9 @@ import org.mockito.internal.util.reflection.LenientCopyTool;
 
 import java.io.Serializable;
 
+import static org.mockito.Mockito.RETURNS_DEFAULTS;
+import static org.mockito.Mockito.withSettings;
+
 @SuppressWarnings("unchecked")
 public class MockUtil {
     
@@ -38,7 +41,9 @@ public class MockUtil {
 
         settings.initiateMockName(classToMock);
 
-        MethodInterceptorFilter filter = newMethodInterceptorFilter(settings);
+        MockHandler<T> mockHandler = new MockHandler<T>(settings);
+        InvocationNotifierHandler<T> invocationNotifierHandler = new InvocationNotifierHandler<T>(mockHandler, settings);
+        MethodInterceptorFilter filter = new MethodInterceptorFilter(invocationNotifierHandler, settings);
         Class<?>[] interfaces = settings.getExtraInterfaces();
 
         Class<?>[] ancillaryTypes;
@@ -61,16 +66,12 @@ public class MockUtil {
 
     public <T> void resetMock(T mock) {
         MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);
-        MethodInterceptorFilter newFilter = newMethodInterceptorFilter(oldMockHandler.getMockSettings());
+        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);
+        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, 
+                        (MockSettingsImpl) withSettings().defaultAnswer(RETURNS_DEFAULTS));
         ((Factory) mock).setCallback(0, newFilter);
     }
 
-    private <T> MethodInterceptorFilter newMethodInterceptorFilter(MockSettingsImpl settings) {
-        MockHandler<T> mockHandler = new MockHandler<T>(settings);
-        InvocationNotifierHandler<T> invocationNotifierHandler = new InvocationNotifierHandler<T>(mockHandler, settings);
-        return new MethodInterceptorFilter(invocationNotifierHandler, settings);
-    }
-
     public <T> MockHandlerInterface<T> getMockHandler(T mock) {
         if (mock == null) {
             throw new NotAMockException("Argument should be a mock, but is null!");
