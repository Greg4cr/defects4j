diff --git a/org/mockito/exceptions/Reporter.java b/org/mockito/exceptions/Reporter.java
index 5900574..202d29f 100644
--- a/org/mockito/exceptions/Reporter.java
+++ b/org/mockito/exceptions/Reporter.java
@@ -4,8 +4,8 @@
  */
 package org.mockito.exceptions;
 
-import static org.mockito.exceptions.Pluralizer.pluralize;
-import static org.mockito.internal.util.StringJoiner.join;
+import static org.mockito.exceptions.Pluralizer.*;
+import static org.mockito.internal.util.StringJoiner.*;
 
 import java.util.List;
 
@@ -139,7 +139,7 @@ public class Reporter {
         throw new NullInsteadOfMockException(join(
                 "Argument passed to when() is null!",
                 "Example of correct stubbing:",
-                "    doThrow(new RuntimeException()).when(mock).someMethod();",
+                "    doThrow(new RuntimeException()).when(mock).someMethod();",                
                 "Also, if you use @Mock annotation don't miss initMocks()"
         ));
     }
@@ -211,7 +211,7 @@ public class Reporter {
         throw new InvalidUseOfMatchersException(join(
                 "Invalid use of argument matchers!",
                 expectedMatchersCount + " matchers expected, " + recordedMatchersCount + " recorded.",
-                "This exception may occur if matchers are combined with raw values:",
+                "This exception may occur if matchers are combined with raw values:",        
                 "    //incorrect:",
                 "    someMethod(anyObject(), \"raw String\");",
                 "When using matchers, all arguments have to be provided by matchers.",
@@ -224,7 +224,7 @@ public class Reporter {
     }
 
     public void argumentsAreDifferent(String wanted, String actual, Location actualLocation) {
-        String message = join("Argument(s) are different! Wanted:",
+        String message = join("Argument(s) are different! Wanted:", 
                 wanted,
                 new Location(),
                 "Actual invocation has different arguments:",
@@ -327,7 +327,7 @@ public class Reporter {
                     wanted.toString(),
                     "Wanted " + discrepancy.getPluralizedWantedCount() + ":",
                     new Location(),
-                    "But was " + discrepancy.getPluralizedActualCount() + ":",
+                    "But was " + discrepancy.getPluralizedActualCount() + ":", 
                     ending
             );
             return message;
@@ -435,11 +435,10 @@ public class Reporter {
                 ));
     }
 
-    public void smartNullPointerException(Object obj, Location location) {
+    public void smartNullPointerException(Location location) {
         throw new SmartNullPointerException(join(
                 "You have a NullPointerException here:",
                 new Location(),
-                obj,
                 "Because this method was *not* stubbed correctly:",
                 location,
                 ""
@@ -477,7 +476,7 @@ public class Reporter {
     public void extraInterfacesCannotContainMockedType(Class<?> wrongType) {
         throw new MockitoException(join(
                 "extraInterfaces() does not accept the same type as the mocked type.",
-                "You mocked following type: " + wrongType.getSimpleName(),
+                "You mocked following type: " + wrongType.getSimpleName(), 
                 "and you passed the same very interface to the extraInterfaces()"
         ));
     }
@@ -526,7 +525,7 @@ public class Reporter {
 
     public void unsupportedCombinationOfAnnotations(String undesiredAnnotationOne, String undesiredAnnotationTwo) {
         throw new MockitoException("This combination of annotations is not permitted on a single field:\n" +
-                "@" + undesiredAnnotationOne + " and @" + undesiredAnnotationTwo);
+                "@" + undesiredAnnotationOne + " and @" + undesiredAnnotationTwo);   
     }
 
     public void cannotInitializeForSpyAnnotation(String fieldName, Exception details) {
diff --git a/org/mockito/internal/stubbing/defaultanswers/ReturnsSmartNulls.java b/org/mockito/internal/stubbing/defaultanswers/ReturnsSmartNulls.java
index 928f314..4942d7c 100644
--- a/org/mockito/internal/stubbing/defaultanswers/ReturnsSmartNulls.java
+++ b/org/mockito/internal/stubbing/defaultanswers/ReturnsSmartNulls.java
@@ -53,7 +53,7 @@ public class ReturnsSmartNulls implements Answer<Object>, Serializable {
                 return "SmartNull returned by unstubbed " + formatMethodCall()  + " method on mock";
             }
 
-            new Reporter().smartNullPointerException(obj, location);
+            new Reporter().smartNullPointerException(location);
             return null;
         }
 
