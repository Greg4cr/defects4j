diff --git a/org/mockito/internal/stubbing/defaultanswers/ReturnsSmartNulls.java b/org/mockito/internal/stubbing/defaultanswers/ReturnsSmartNulls.java
index 4942d7c..1392592 100644
--- a/org/mockito/internal/stubbing/defaultanswers/ReturnsSmartNulls.java
+++ b/org/mockito/internal/stubbing/defaultanswers/ReturnsSmartNulls.java
@@ -4,10 +4,6 @@
  */
 package org.mockito.internal.stubbing.defaultanswers;
 
-import java.io.Serializable;
-import java.lang.reflect.Method;
-import java.util.Arrays;
-
 import org.mockito.Mockito;
 import org.mockito.cglib.proxy.MethodInterceptor;
 import org.mockito.cglib.proxy.MethodProxy;
@@ -18,6 +14,9 @@ import org.mockito.internal.util.ObjectMethodsGuru;
 import org.mockito.invocation.InvocationOnMock;
 import org.mockito.stubbing.Answer;
 
+import java.io.Serializable;
+import java.lang.reflect.Method;
+
 /**
  * Optional Answer that can be used with
  * {@link Mockito#mock(Class, Answer)}
@@ -50,17 +49,12 @@ public class ReturnsSmartNulls implements Answer<Object>, Serializable {
 
         public Object intercept(Object obj, Method method, Object[] args, MethodProxy proxy) throws Throwable {
             if (new ObjectMethodsGuru().isToString(method)) {
-                return "SmartNull returned by unstubbed " + formatMethodCall()  + " method on mock";
+                return "SmartNull returned by unstubbed " + invocation.getMethod().getName() + "() method on mock";
             }
 
             new Reporter().smartNullPointerException(location);
             return null;
         }
-
-		private String formatMethodCall() {
-			String args = Arrays.toString(invocation.getArguments());
-			return invocation.getMethod().getName() + "(" + args.substring(1, args.length() - 1) +	")";
-		}
     }
 
     private final Answer<Object> delegate = new ReturnsMoreEmptyValues();
